generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum order_status {
  PENDING
  IN_PROGRESS
  COMPLETED
  PARTIAL
  PROCESSING
  CANCELLED
  FAILED
}

model plan {
  id              String      @id @default(uuid())
  name            String      @unique
  price           Int
  requireCard     Boolean     @map("require_card")
  monthlyLimit    Int         @map("monthly_limit")
  gatewayId       String?      @unique @map("gateway_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  users           user[]

  @@map("plans")
}

model user {
  id              String      @id @default(uuid())
  email           String      @unique
  password        String
  ip              String
  planId          String     @map("plan_id")
  gatewayId       String?    @unique @map("gateway_id")
  utmSource       String?    @map("utm_source")
  utmMedium       String?    @map("utm_medium")
  utmCampaign     String?    @map("utm_campaign")
  monthlyLimit    Int        @map("monthly_limit")
  lastAccessAt    DateTime?  @map("last_access_at")
  limitResetAt    DateTime?  @map("limit_reset_at")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  deletedAt       DateTime?  @map("deleted_at")

  passwordResetAttempts  passwordResetAttempt[]
  warnings               warning[]
  orders                 order[]

  plan            plan        @relation(fields: [planId], references: [id])

  @@map("users")
}

model passwordResetAttempt {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  password        String      @map("password")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  expiredAt       DateTime    @map("expired_at")
  deletedAt       DateTime?   @map("deleted_at")

  user            user        @relation(fields: [userId], references: [id])

  @@map("password_reset_attempts")
}

model warning {
  id              String      @id @default(uuid())
  title           String
  message         String
  actionUrl       String?     @map("action_url")
  actionText      String?     @map("action_text")
  userId          String?     @map("user_id")
  seenAt          DateTime?   @map("seen_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  user            user?       @relation(fields: [userId], references: [id])

  @@map("warnings")
}
model suspect {
  id              String      @id @default(uuid())
  username        String
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")

  @@map("suspects")
}

model order {
  id                  String      @id @default(uuid())
  userId              String      @map("user_id")
  username            String
  amount              Int
  remains             Int
  smmOrderId          String      @map("smm_order_id")
  smmServiceId        String      @map("smm_service_id")
  status              order_status
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  deletedAt           DateTime?   @map("deleted_at")

  user                user        @relation(fields: [userId], references: [id])

  @@map("orders")
}